
TopLevel
    = _ Statement _
    ;

Statement
    = SelectStatement
    ;

SelectStatement
    = SELECT { @Expression @FromClause? @WhereClause? #select }
    ;

WhereClause
    = WHERE { @Expression #where } _
    ;

FromClause
    = FROM { @Path #from } _
    ;

SELECT
    = "select" !NCHAR _
    ;

WHERE
    = "where" !NCHAR _
    ;

FROM
    = "from" !NCHAR _
    ;

Path
    = { (@PathSeg ("." @PathSeg)*)? #path } _
    ;

PathSeg
    = { @PathName @Index? #tag }
    ;

PathName
    = { (WILDCARD / TAG) #name }
    ;

Index
    = '[' _ (Range / NumberList) _ ']' _
    ;

Range
    = { @Number _ '..' _ @Number #range }
    ;

NumberList
    = { (@Number (COMMA @Number)*)? #indexlist } _
    ;

WILDCARD
    = "*"
    ;

TAG
    = "#"? SYMBOL
    ;

SYMBOL
    = [a-zA-Z_][a-zA-Z0-9_]*
    ;

PrimaryExpression
    = ( Number / String / FuncCall / Path ) _
    / '(' _ Expression _ ')' _
    ;

FuncCall
    = { @SYMBOL _ '(' @ArgumentList ')' #call } _ 
    ;

ArgumentList
    = { (@Expression (COMMA @Expression)*)? #arguments } _
    ;

EQ
    = '==' _ #eq
    ;
NEQ
    = '!=' _ #neq
    ;
LE
    = '<=' _ #le
    ;
GE
    = '>=' _ #ge
    ;
LT
    = '<' !'=' _ #lt
    ;
GT
    = '>' !'=' _ #gt
    ;

RATIONAL
    = EQ / NEQ / LE / GE / LT / GT
    ;

RelationalExpression
    = PrimaryExpression {@ RATIONAL @PrimaryExpression }*
    ;

OR
    = ('||' / 'or' !NCHAR) _ #or
    ;

AND
    = ('&&' / 'and' !NCHAR) _ #and
    ;

AndExpression
    = RelationalExpression {@ AND @RelationalExpression }*
    ;

OrExpression
    = AndExpression {@ OR @AndExpression }*
    ;

COMMA
    = ',' _
    ;

CommaExpression
    = OrExpression {@ COMMA @OrExpression }*
    ;

Expression
    = CommaExpression
    ;

NCHAR
    = [a-zA-Z0-9_]
    / [A-Z]
    / [0-9]
    / [_]
    ;

String
    = StringDouble
    / StringSingle
    ;

StringDouble
    = DQUOTE { (!DQUOTE SCHAR)* #string } DQUOTE
    ;

StringSingle
    = SQUOTE { (!SQUOTE SCHAR)* #string } SQUOTE
    ;

SCHAR
    = '\\\\' `\\`/ '\\"' `"`/ "\\'" `'`/ .
    ;

DQUOTE
    = '"'
    ;

SQUOTE
    = "'"
    ;

Number
    = { Minus? Int Frac? Exp? #number }
    ;
Minus
    = '-'
    ;
Int
    = Zero
    / Digit1_9 DIGIT*
    ;
Zero
    = '0'
    ;
Digit1_9
    = [1-9]
    ;
DIGIT
    = [0-9]
    ;
Frac
    = DecimalPoint DIGIT+
    ;
DecimalPoint
    = '.'
    ;
Exp
    = E (Minus / Plus)? DIGIT+
    ;
E
    = [eE]
    ;
Plus
    = '+'
    ;
